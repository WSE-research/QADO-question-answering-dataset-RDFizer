@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix void: <http://rdfs.org/ns/void#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix qado: <http://purl.com/qado/ontology.ttl#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#>.
@base <URL#>.


<#DatasetMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.questions.[*]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-dataset";
        rr:class qado:Dataset];
    rr:predicateObjectMap [
        rr:predicate void:dataDump;
        rr:objectMap [
            rr:template "URL"]];
    rr:predicateObjectMap [
        rr:predicate rdfs:label;
        rr:objectMap [
            rr:template "LABEL";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate foaf:homepage;
        rr:objectMap [
            rr:template "HOMEPAGE";
            rr:datatype xsd:string]].


<#AnswerURIMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.questions.[?(@.answers)]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-{id}";
        rr:class qado:ValidAnswer];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswerBody;
        rr:objectMap [
            rml:reference "answers.[*].results.bindings.[?(@..type contains \"uri\")]..value";
            rr:termType rr:IRI]].


<#AnswerLiteralMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.questions.[?(@.answers)]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-{id}";
        rr:class qado:ValidAnswer];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswerBody;
        rr:objectMap [
            rml:reference "answers.[*].results.bindings.[?(@..type contains \"literal\")]..value";
            rr:datatype xsd:string]].


<#AnswerBooleanMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.questions.[?(@.answers..boolean)]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-{id}";
        rr:class qado:ValidAnswer];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswerBody;
        rr:objectMap [
            rml:reference "answers.[*].boolean";
            rr:datatype xsd:boolean]].


<#EmptyAnswerMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.questions.[?(!@.answers)]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-{id}";
        rr:class qado:EmptyAnswer].


<#QueryMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.questions.[*]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-query-{id}";
        rr:class qado:Query];
    rr:predicateObjectMap [
        rr:predicate qado:hasQueryText;
        rr:objectMap [
            rml:reference "query.sparql";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQueryText;
        rr:objectMap [
            rml:reference "query.pseudo";
            rr:datatype xsd:string]].


<#QuestionMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.questions.[?(@.answers)]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-question-{id}";
        rr:class qado:ValidQuestion];
    rr:predicateObjectMap [
        rr:predicate qado:isElementOf;
        rr:objectMap[
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-dataset"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasId;
        rr:objectMap [
            rml:reference "id";
            rr:datatype xsd:nonNegativeInteger]];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswerType;
        rr:objectMap [
            rml:reference "answertype";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasAggregation;
        rr:objectMap [
            rml:reference "aggregation";
            rr:datatype xsd:boolean]];
    rr:predicateObjectMap [
        rr:predicate qado:isOnlyDBpediaCompatible;
        rr:objectMap [
            rml:reference "onlydbo";
            rr:datatype xsd:boolean]];
    rr:predicateObjectMap [
        rr:predicate qado:hasSPARQLResult;
        rr:objectMap [
            rml:reference "answers";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasSparqlQuery;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-query-{id}"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"de\")].string";
            rr:language "de"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"ru\")].string";
            rr:language "ru"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"pt\")].string";
            rr:language "pt"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"en\")].string";
            rr:language "en"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"hi_IN\")].string";
            rr:language "hi-IN"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"fa\")].string";
            rr:language "fa"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"pt_BR\")].string";
            rr:language "pt-BR"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"it\")].string";
            rr:language "it"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"fr\")].string";
            rr:language "fr"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"ro\")].string";
            rr:language "ro"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"es\")].string";
            rr:language "es"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"nl\")].string";
            rr:language "nl"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"de\")].keywords";
            rr:language "de"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"ru\")].keywords";
            rr:language "ru"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"pt\")].keywords";
            rr:language "pt"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"en\")].keywords";
            rr:language "en"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"hi_IN\")].keywords";
            rr:language "hi-IN"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"fa\")].keywords";
            rr:language "fa"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"pt_BR\")].keywords";
            rr:language "pt-BR"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"it\")].keywords";
            rr:language "it"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"fr\")].keywords";
            rr:language "fr"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"ro\")].keywords";
            rr:language "ro"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"es\")].keywords";
            rr:language "es"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"nl\")].keywords";
            rr:language "nl"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"uk\")].keywords";
            rr:language "uk"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"lt\")].keywords";
            rr:language "lt"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"be\")].keywords";
            rr:language "be"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"ba\")].keywords";
            rr:language "ba"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"hy\")].keywords";
            rr:language "hy"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswer;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-{id}"]];
    rr:predicateObjectMap [
        rr:predicate qado:isHybrid;
        rr:objectMap [
            rml:reference "hybrid";
            rr:datatype xsd:boolean]].


<#UnanswerableQuestionMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.questions.[?(!@.answers)]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-question-{id}";
        rr:class qado:UnanswerableQuestion];
    rr:predicateObjectMap [
        rr:predicate qado:isElementOf;
        rr:objectMap[
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-dataset"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasId;
        rr:objectMap [
            rml:reference "id";
            rr:datatype xsd:nonNegativeInteger]];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswerType;
        rr:objectMap [
            rml:reference "answertype";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasAggregation;
        rr:objectMap [
            rml:reference "aggregation";
            rr:datatype xsd:boolean]];
    rr:predicateObjectMap [
        rr:predicate qado:isOnlyDBpediaCompatible;
        rr:objectMap [
            rml:reference "onlydbo";
            rr:datatype xsd:boolean]];
    rr:predicateObjectMap [
        rr:predicate qado:hasSPARQLResult;
        rr:objectMap [
            rml:reference "answers";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasSparqlQuery;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-query-{id}"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"de\")].string";
            rr:language "de"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"ru\")].string";
            rr:language "ru"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"pt\")].string";
            rr:language "pt"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"en\")].string";
            rr:language "en"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"hi_IN\")].string";
            rr:language "hi-IN"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"fa\")].string";
            rr:language "fa"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"pt_BR\")].string";
            rr:language "pt-BR"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"it\")].string";
            rr:language "it"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"fr\")].string";
            rr:language "fr"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"ro\")].string";
            rr:language "ro"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"es\")].string";
            rr:language "es"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"nl\")].string";
            rr:language "nl"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"de\")].keywords";
            rr:language "de"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"ru\")].keywords";
            rr:language "ru"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"pt\")].keywords";
            rr:language "pt"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"en\")].keywords";
            rr:language "en"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"hi_IN\")].keywords";
            rr:language "hi-IN"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"fa\")].keywords";
            rr:language "fa"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"pt_BR\")].keywords";
            rr:language "pt-BR"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"it\")].keywords";
            rr:language "it"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"fr\")].keywords";
            rr:language "fr"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"ro\")].keywords";
            rr:language "ro"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"es\")].keywords";
            rr:language "es"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasKeyword;
        rr:objectMap [
            rml:reference "question.[?(@.language == \"nl\")].keywords";
            rr:language "nl"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswer;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-{id}"]];
    rr:predicateObjectMap [
        rr:predicate qado:isHybrid;
        rr:objectMap [
            rml:reference "hybrid";
            rr:datatype xsd:boolean]].
