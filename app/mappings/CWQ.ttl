@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix void: <http://rdfs.org/ns/void#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix qado: <http://purl.com/qado/ontology.ttl#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#>.
@base <URL#>.


<#DatasetMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[*]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-dataset";
        rr:class qado:Dataset];
    rr:predicateObjectMap [
        rr:predicate void:dataDump;
        rr:objectMap [
            rr:template "URL"]];
    rr:predicateObjectMap [
        rr:predicate rdfs:label;
        rr:objectMap [
            rr:template "LABEL";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate foaf:homepage;
        rr:objectMap [
            rr:template "HOMEPAGE";
            rr:datatype xsd:string]].


<#QueryMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[*]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-query-{ID}";
        rr:class qado:Query];
    rr:predicateObjectMap [
        rr:predicate qado:hasQueryText;
        rr:objectMap [
            rml:reference "sparql";
            rr:datatype xsd:string]].


<#QuestionMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[?(@.answers)]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-question-{ID}";
        rr:class qado:ValidQuestion];
    rr:predicateObjectMap [
        rr:predicate qado:hasId;
        rr:objectMap [
            rml:reference "ID";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:isElementOf;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-dataset"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasCompositionAnswer;
        rr:objectMap [
            rml:reference "composition_answer";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasCompositionalityType;
        rr:objectMap [
            rml:reference "compositionality_type";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:createdAt;
        rr:objectMap [
            rml:reference "created";
            rr:datatype xsd:dateTime]];
    rr:predicateObjectMap [
        rr:predicate qado:hasMachineReadableQuestion;
        rr:objectMap [
            rml:reference "machine_question";
            rr:language "en"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question";
            rr:language "en"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasSparqlQuery;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-query-{ID}"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasWebqspId;
        rr:objectMap [
            rml:reference "webqsp_ID";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasWebqspQuestion;
        rr:objectMap [
            rml:reference "webqsp_question";
            rr:language "en"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswer;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-{ID}"]].


<#UnanswerableQuestionMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[?(!@.answers)]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-question-{ID}";
        rr:class qado:UnanswerableQuestion];
    rr:predicateObjectMap [
        rr:predicate qado:hasId;
        rr:objectMap [
            rml:reference "ID";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:isElementOf;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-dataset"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasCompositionAnswer;
        rr:objectMap [
            rml:reference "composition_answer";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasCompositionalityType;
        rr:objectMap [
            rml:reference "compositionality_type";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:createdAt;
        rr:objectMap [
            rml:reference "created";
            rr:datatype xsd:dateTime]];
    rr:predicateObjectMap [
        rr:predicate qado:hasMachineReadableQuestion;
        rr:objectMap [
            rml:reference "machine_question";
            rr:language "en"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasQuestion;
        rr:objectMap [
            rml:reference "question";
            rr:language "en"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasSparqlQuery;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-query-{ID}"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasWebqspId;
        rr:objectMap [
            rml:reference "webqsp_ID";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasWebqspQuestion;
        rr:objectMap [
            rml:reference "webqsp_question";
            rr:language "en"]];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswer;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-{ID}"]].


<#AnswerMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[?(@.answers)]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-{ID}";
        rr:class qado:ValidAnswer];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswerContent;
        rr:objectMap [
            rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-content-{answers.[*].answer_id}"]].


<#EmptyAnswerMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[?(!@.answers)]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-{ID}";
        rr:class qado:EmptyAnswer].


<#AnswerContentMapping> a rr:TriplesMap;
    rml:logicalSource [
        rml:source "example.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$..answers.[*]"];
    rr:subjectMap [
        rr:template "http://purl.com/qado/ontology.ttl#LABEL-answer-content-{answer_id}";
        rr:class qado:AnswerContent];
    rr:predicateObjectMap [
        rr:predicate qado:hasId;
        rr:objectMap [
            rml:reference "answer_id";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasAnswerText;
        rr:objectMap [
            rml:reference "answer";
            rr:datatype xsd:string]];
    rr:predicateObjectMap [
        rr:predicate qado:hasAlias;
        rr:objectMap [
            rml:reference "aliases.[*]";
            rr:datatype xsd:string]].
